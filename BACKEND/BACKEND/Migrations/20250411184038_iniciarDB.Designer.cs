// <auto-generated />
using System;
using BACKEND.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BACKEND.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250411184038_iniciarDB")]
    partial class iniciarDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BACKEND.Models.Cobertura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Coberturas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Robo"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Accidente"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Daños por desastre natural"
                        });
                });

            modelBuilder.Entity("BACKEND.Models.EstadoPoliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EstadoPolizas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Activa"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Vencida"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Cancelada"
                        });
                });

            modelBuilder.Entity("BACKEND.Models.Poliza", b =>
                {
                    b.Property<string>("NumeroPoliza")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Aseguradora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CedulaAsegurado")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoberturaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoPolizaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInclusion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoAsegurado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Periodo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Prima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoPolizaId")
                        .HasColumnType("int");

                    b.HasKey("NumeroPoliza");

                    b.HasIndex("CedulaAsegurado");

                    b.HasIndex("CoberturaId");

                    b.HasIndex("EstadoPolizaId");

                    b.HasIndex("TipoPolizaId");

                    b.ToTable("Polizas");
                });

            modelBuilder.Entity("BACKEND.Models.TipoPoliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TipoPolizas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Vivienda"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Vehículo"
                        });
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Cedula");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Cedula = "402321325",
                            FechaNacimiento = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Juan",
                            PrimerApellido = "Pérez",
                            SegundoApellido = "Ramírez",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Cedula = "402321327",
                            FechaNacimiento = new DateTime(1985, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "María",
                            PrimerApellido = "Gómez",
                            SegundoApellido = "Torres",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Cedula = "402321321",
                            FechaNacimiento = new DateTime(1992, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carlos",
                            PrimerApellido = "Hernández",
                            SegundoApellido = "Vargas",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Cedula = "402321322",
                            FechaNacimiento = new DateTime(1998, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ana",
                            PrimerApellido = "Morales",
                            SegundoApellido = "Lopez",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Cedula = "402321323",
                            FechaNacimiento = new DateTime(1980, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Luis",
                            PrimerApellido = "Martínez",
                            SegundoApellido = "Soto",
                            TipoPersona = "Física"
                        });
                });

            modelBuilder.Entity("BACKEND.Models.Poliza", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("CedulaAsegurado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BACKEND.Models.Cobertura", "Cobertura")
                        .WithMany()
                        .HasForeignKey("CoberturaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BACKEND.Models.EstadoPoliza", "EstadoPoliza")
                        .WithMany()
                        .HasForeignKey("EstadoPolizaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BACKEND.Models.TipoPoliza", "TipoPoliza")
                        .WithMany()
                        .HasForeignKey("TipoPolizaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Cobertura");

                    b.Navigation("EstadoPoliza");

                    b.Navigation("TipoPoliza");
                });
#pragma warning restore 612, 618
        }
    }
}
